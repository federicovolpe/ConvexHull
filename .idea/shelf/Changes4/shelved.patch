Index: src/main/java/main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\n\nimport basic.Edge;\nimport basic.Node2D;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport heuristics.*;\nimport heuristics.Heuristic;\nimport paintGraph.GraphPanel;\nimport paintGraph.GraphWithPoints;\nimport utils.utilMethods;\n\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.Geometry;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.Polygon;\n\nimport javax.swing.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<Node2D> nodes = utilMethods.rndNodesGenerator2D(50);\n    JarvisMarch jm = new JarvisMarch(nodes);\n    List<Edge> convexHull = jm.getHullEdges();\n\n    // Heuristic h = new CuttingNodes(5, convexHull);\n    // Heuristic h = new CuttingNodes2(5, convexHull);\n    // Heuristic h = new CuttingNodes3(5, convexHull);\n    Heuristic h = new DistanceFromG(5, jm.getHullNodes(), nodes);\n    GraphPanel graph = new GraphPanel(nodes, convexHull, h);\n    JFrame frame = new GraphWithPoints(graph);\n    frame.setVisible(true);\n\n    int iterations = 50;\n    double jaccard = 0;\n    for (int i = 0; i < iterations; i++) {\n      nodes = utilMethods.rndNodesGenerator2D(10);\n      jm = new JarvisMarch(nodes);\n      h = new DistanceFromG(5, jm.getHullNodes(), nodes);\n      jaccard += jaccardIndex(jm.getHullNodes(), h.getHullNodes());\n    }\n    System.out.println(\"jaccardIndex over \" + iterations + \" iterations: \" + jaccard/ iterations);\n  }\n\n\n  public static double jaccardIndex(List<Node2D> hullA, List<Node2D> hullB) {\n    GeometryFactory geometryFactory = new GeometryFactory();\n\n    System.out.println(\"hullA: \" + hullA);\n    // Define coordinates for the first polygon\n    List<Coordinate> polygonACoords = new ArrayList<>();\n    for (Node2D n : hullA) polygonACoords.add(new Coordinate(n.getX(), n.getY()));\n    polygonACoords.add(new Coordinate(hullA.get(0).getX(), hullA.get(0).getY()));\n\n    // Define coordinates for the second polygon\n    List<Coordinate> polygonBCoords = new ArrayList<>();\n    for (Node2D n : hullB) polygonBCoords.add(new Coordinate(n.getX(), n.getY()));\n    polygonBCoords.add(new Coordinate(hullB.get(0).getX(), hullB.get(0).getY()));\n\n\n    // Create Polygon objects\n    Coordinate[] pa = polygonACoords.toArray(new Coordinate[0]);\n    Polygon polygonA = geometryFactory.createPolygon(pa);\n\n    Coordinate[] pb = polygonBCoords.toArray(new Coordinate[0]);\n    Polygon polygonB = geometryFactory.createPolygon(pb);\n\n    // Compute the symmetric difference\n    //Geometry symmetricDifference = polygonA.symDifference(polygonB);\n\n    Geometry intersection = polygonA.intersection(polygonB);\n    Geometry union = polygonA.union(polygonB);\n    double intersectionArea = intersection.getArea();\n    double unionArea = union.getArea();\n\n    // Calcola l'indice di Jaccard\n    return intersectionArea / unionArea;\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/main/Main.java b/src/main/java/main/Main.java
--- a/src/main/java/main/Main.java	(revision d953d585107e7a02d894720d64a97c26c1246ca2)
+++ b/src/main/java/main/Main.java	(date 1722012814876)
@@ -21,27 +21,48 @@
 
 public class Main {
   public static void main(String[] args) {
-    List<Node2D> nodes = utilMethods.rndNodesGenerator2D(50);
+    List<Node2D> nodes = utilMethods.rndNodesGenerator2D(25);
     JarvisMarch jm = new JarvisMarch(nodes);
     List<Edge> convexHull = jm.getHullEdges();
 
-    // Heuristic h = new CuttingNodes(5, convexHull);
-    // Heuristic h = new CuttingNodes2(5, convexHull);
-    // Heuristic h = new CuttingNodes3(5, convexHull);
-    Heuristic h = new DistanceFromG(5, jm.getHullNodes(), nodes);
+    // Heuristic h = new CuttingSmallerAngle(5, convexHull);
+    // Heuristic h = new CuttingLargerAngle(5, convexHull);
+    // Heuristic h = new CuttingLargerAngle2(5, convexHull);
+    Heuristic h = new CuttingSmallerAngle2(5, convexHull);
+    //Heuristic h = new DistanceFromG(5, jm.getHullNodes(), nodes);
     GraphPanel graph = new GraphPanel(nodes, convexHull, h);
     JFrame frame = new GraphWithPoints(graph);
     frame.setVisible(true);
 
-    int iterations = 50;
+    //iterationStatistics();
+  }
+
+  public static void iterationStatistics(){
+    int iterations = 100;
     double jaccard = 0;
     for (int i = 0; i < iterations; i++) {
-      nodes = utilMethods.rndNodesGenerator2D(10);
-      jm = new JarvisMarch(nodes);
-      h = new DistanceFromG(5, jm.getHullNodes(), nodes);
-      jaccard += jaccardIndex(jm.getHullNodes(), h.getHullNodes());
+      System.out.println("-------------- iteration : " + i);
+      List<Node2D> nodes = utilMethods.rndNodesGenerator2D(10);
+      JarvisMarch jm = new JarvisMarch(nodes);
+      List<Edge> convexHull = jm.getHullEdges();
+      Heuristic h = null;
+      try {
+        // h = new CuttingSmallerAngle(5, convexHull);
+        // h = new CuttingLargerAngle(5, convexHull);
+        h = new CuttingLargerAngle2(5, convexHull);
+        // h = new DistanceFromG(5, jm.getHullNodes(), nodes);
+
+        jaccard += jaccardIndex(jm.getHullNodes(), h.getHullNodes());
+      } catch (Exception e) {
+        GraphPanel problemGraph = new GraphPanel(nodes, convexHull, h);
+        JFrame problemFrame = new GraphWithPoints(problemGraph);
+        problemFrame.setVisible(true);
+        e.printStackTrace();
+        break;
+      }
     }
     System.out.println("jaccardIndex over " + iterations + " iterations: " + jaccard/ iterations);
+
   }
 
 
